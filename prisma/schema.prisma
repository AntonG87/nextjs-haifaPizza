generator client{
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email String @unique
  password String

  role UserRole @default(USER)

  provider String?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart Cart?
  verificationCode  VerificationCode?

  verified DateTime

  orders Order[]
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique
  products Product[]

}

model Product {
  id Int @id @default(autoincrement())

  name String
  description String?

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  items ProductItem[]

  price Float?
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem{
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id Int @id @default(autoincrement())

  name String @unique
  price Int
  imageUrl String

  products Product[]

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart{
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int @unique

  totalAmount Int @default(0)
  totalPrice Int @default(0)

  token String?

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem ProductItem@relation(fields: [productItemId], references: [id])
  productItemId Int

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingredient[]
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status OrderStatus
  paymentId String?

  items Json

  fullName String
  address String
  email String
  phone String
  comment String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCESSED
  CANCELED
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  code String @unique


  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}